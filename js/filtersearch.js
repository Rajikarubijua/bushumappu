// Generated by CoffeeScript 1.6.2
(function() {
  define(['utils'], function(_arg) {
    var FilterSearch, InputHandler, P;

    P = _arg.P;
    FilterSearch = (function() {
      function FilterSearch(_arg1) {
        this.graph = _arg1.graph, this.view = _arg1.view;
        this.inHandler = new InputHandler({
          graph: this.graph
        });
      }

      FilterSearch.prototype.filter = function() {
        var criteria, edge, nearHidden, node, _i, _j, _len, _len1, _ref, _ref1;

        criteria = this.inHandler.getInputData();
        _ref = this.graph.nodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          if (this.isWithinCriteria(node.data, criteria)) {
            node.style.filtered = false;
          } else {
            node.style.filtered = true;
          }
        }
        _ref1 = this.graph.edges;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          edge = _ref1[_j];
          nearHidden = edge.source.style.filtered || edge.target.style.filtered;
          if (nearHidden) {
            edge.style.filtered = true;
          }
        }
        return this.view.update();
      };

      FilterSearch.prototype.search = function() {
        var criteria, node, searchresult, _i, _len, _ref;

        searchresult = [];
        criteria = this.inHandler.getInputData();
        _ref = this.graph.nodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          node.style.isSearchresult = false;
          if (this.isWithinCriteria(node.data, criteria)) {
            node.style.isSearchresult = true;
            searchresult.push(node);
          }
        }
        this.view.update();
        return searchresult;
      };

      FilterSearch.prototype.resetFilter = function(id) {
        return this.inHandler.fillStandardInput(id);
      };

      FilterSearch.prototype.resetAll = function() {
        var edge, node, _i, _j, _len, _len1, _ref, _ref1;

        _ref = this.graph.nodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          node.style.isSearchresult = false;
          node.style.filtered = false;
        }
        _ref1 = this.graph.edges;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          edge = _ref1[_j];
          edge.style.isSearchresult = false;
          edge.style.filtered = false;
        }
        this.inHandler.clearInput();
        return this.view.update();
      };

      FilterSearch.prototype.isWithinCriteria = function(kanji, criteria) {
        var frqMax, frqMin, gradeMax, gradeMin, inKanji, inKun, inMean, inOn, strokeMax, strokeMin, withinFrq, withinGrade, withinInKanji, withinInKun, withinInMean, withinInOn, withinStroke;

        strokeMin = criteria.strokeMin, strokeMax = criteria.strokeMax, frqMin = criteria.frqMin, frqMax = criteria.frqMax, gradeMin = criteria.gradeMin, gradeMax = criteria.gradeMax, inKanji = criteria.inKanji, inOn = criteria.inOn, inKun = criteria.inKun, inMean = criteria.inMean;
        withinStroke = kanji.stroke_n >= strokeMin && kanji.stroke_n <= strokeMax;
        withinFrq = kanji.freq <= frqMin && kanji.freq >= frqMax;
        withinGrade = kanji.grade >= gradeMin && kanji.grade <= gradeMax;
        withinInKanji = this.check(kanji.kanji, inKanji);
        withinInOn = this.check(kanji.onyomi, inOn);
        withinInKun = this.check(kanji.kunyomi, inKun);
        withinInMean = this.check(kanji.meaning, inMean);
        return withinStroke && withinFrq && withinGrade && withinInKanji && withinInOn && withinInKun && withinInMean;
      };

      FilterSearch.prototype.check = function(arrValueData, arrFieldData) {
        var item, token_dt, token_jp, value, _i, _j, _len, _len1;

        if (arrFieldData === void 0 || arrFieldData === '') {
          return true;
        }
        if (arrValueData === void 0) {
          return false;
        }
        token_jp = '、';
        token_dt = ',';
        if (arrValueData.indexOf(token_jp) === -1) {
          arrValueData = arrValueData.split(token_dt);
        } else {
          arrValueData = arrValueData.split(token_jp);
        }
        if (arrFieldData.indexOf(token_jp) === -1) {
          arrFieldData = arrFieldData.split(token_dt);
        } else {
          arrFieldData = arrFieldData.split(token_jp);
        }
        for (_i = 0, _len = arrFieldData.length; _i < _len; _i++) {
          item = arrFieldData[_i];
          for (_j = 0, _len1 = arrValueData.length; _j < _len1; _j++) {
            value = arrValueData[_j];
            if (value === item && item !== '') {
              return true;
            }
          }
        }
        return false;
      };

      FilterSearch.prototype.setup = function() {
        return this.inHandler.fillStandardInput('', true);
      };

      return FilterSearch;

    })();
    InputHandler = (function() {
      function InputHandler(_arg1) {
        this.graph = _arg1.graph;
      }

      InputHandler.prototype.displayResult = function(result) {
        var node, resultString, _i, _len;

        resultString = '';
        for (_i = 0, _len = result.length; _i < _len; _i++) {
          node = result[_i];
          resultString = "" + resultString + " " + node.data.kanji;
        }
        if (resultString === '') {
          resultString = 'nothing found in current view';
        }
        return d3.select('table #kanjiresult')[0][0].innerHTML = "searchresult: " + resultString;
      };

      InputHandler.prototype.fillStandardInput = function(id, flag) {
        if (flag == null) {
          flag = false;
        }
        if (id === 'btn_clear1' || flag) {
          this.fillInputData('#count_min', 1);
          this.fillInputData('#count_max', this.getStrokeCountMax(this.graph));
        }
        if (id === 'btn_clear2' || flag) {
          this.fillInputData('#frq_min', this.getFreqMax(this.graph));
          this.fillInputData('#frq_max', 1);
        }
        if (id === 'btn_clear3' || flag) {
          this.fillInputData('#grade_min', 1);
          return this.fillInputData('#grade_max', Object.keys(my.jouyou_grade).length);
        }
      };

      InputHandler.prototype.fillSeaFilTest = function() {
        this.fillStandardInput(this.graph, '', true);
        this.fillInputData('#kanjistring', '日,木,森');
        this.fillInputData('#onyomistring', 'ニチ');
        this.fillInputData('#kunyomistring', 'ひ,き');
        return this.fillInputData('#meaningstring', 'day');
      };

      InputHandler.prototype.clearInput = function() {
        this.fillStandardInput('', true);
        this.fillInputData('#kanjistring', '');
        this.fillInputData('#onyomistring', '');
        this.fillInputData('#kunyomistring', '');
        return this.fillInputData('#meaningstring', '');
      };

      InputHandler.prototype.fillInputData = function(id, value) {
        var path;

        path = "#seafil form " + id;
        return d3.select(path).property('value', value);
      };

      InputHandler.prototype.getInputInt = function(id) {
        var path;

        path = "#seafil form " + id;
        return +d3.select(path).property('value').trim();
      };

      InputHandler.prototype.getInput = function(id) {
        var path;

        path = "#seafil form " + id;
        return d3.select(path).property('value').trim();
      };

      InputHandler.prototype.getInputData = function() {
        return {
          strokeMin: this.getInputInt('#count_min'),
          strokeMax: this.getInputInt('#count_max'),
          frqMin: this.getInputInt('#frq_min'),
          frqMax: this.getInputInt('#frq_max'),
          gradeMin: this.getInputInt('#grade_min'),
          gradeMax: this.getInputInt('#grade_max'),
          inKanji: this.getInput('#kanjistring'),
          inOn: this.getInput('#onyomistring'),
          inKun: this.getInput('#kunyomistring'),
          inMean: this.getInput('#meaningstring')
        };
      };

      InputHandler.prototype.getStrokeCountMax = function() {
        var kanji, max, _i, _len, _ref;

        max = 1;
        _ref = this.graph.kanjis();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          kanji = _ref[_i];
          if (kanji.stroke_n > max) {
            max = kanji.stroke_n;
          }
        }
        return max;
      };

      InputHandler.prototype.getFreqMax = function() {
        var kanji, max, _i, _len, _ref;

        max = 1;
        _ref = this.graph.kanjis();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          kanji = _ref[_i];
          if (kanji.freq > max) {
            max = kanji.freq;
          }
        }
        return max;
      };

      return InputHandler;

    })();
    return {
      FilterSearch: FilterSearch
    };
  });

}).call(this);

/*
//@ sourceMappingURL=filtersearch.map
*/
