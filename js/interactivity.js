// Generated by CoffeeScript 1.6.2
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  define(['utils', 'tubeEdges'], function(utils, _arg) {
    var P, View, compareNumber, createTubes, endnodeSelectLine, nodeDoubleClick, table_data;

    createTubes = _arg.createTubes;
    P = utils.P, compareNumber = utils.compareNumber;
    View = (function() {
      function View(_arg1) {
        this.svg = _arg1.svg, this.graph = _arg1.graph, this.config = _arg1.config;
        this.g_edges = this.svg.append('g');
        this.g_nodes = this.svg.append('g');
        this.g_endnodes = this.svg.append('g');
      }

      View.prototype.update = function(graph) {
        var closeStationLabel, config, delayDblClick, edge, edges, endnode, endnode_g, endnodes, force, g_edges, g_endnodes, g_nodes, lines, node, node_g, node_t, nodes, r, showStationLabel, svg, that, _i, _len, _ref, _ref1;

        if (graph) {
          this.graph = graph;
        }
        svg = this.svg, config = this.config, g_edges = this.g_edges, g_nodes = this.g_nodes, g_endnodes = this.g_endnodes;
        _ref = this.graph, nodes = _ref.nodes, lines = _ref.lines, edges = _ref.edges;
        r = config.nodeSize;
        that = this;
        for (_i = 0, _len = nodes.length; _i < _len; _i++) {
          node = nodes[_i];
          if ((_ref1 = node.label) == null) {
            node.label = node.data.kanji || node.data.radical || "?";
          }
        }
        endnodes = (function() {
          var _j, _len1, _results;

          _results = [];
          for (_j = 0, _len1 = nodes.length; _j < _len1; _j++) {
            node = nodes[_j];
            if (node.data.radical) {
              _results.push(node);
            }
          }
          return _results;
        })();
        nodes = (function() {
          var _j, _len1, _results;

          _results = [];
          for (_j = 0, _len1 = nodes.length; _j < _len1; _j++) {
            node = nodes[_j];
            if (__indexOf.call(endnodes, node) < 0) {
              _results.push(node);
            }
          }
          return _results;
        })();
        edge = g_edges.selectAll(".edge").data(edges);
        node = g_nodes.selectAll('.node').data(nodes);
        endnode = g_endnodes.selectAll('.endnode').data(endnodes);
        closeStationLabel = function(d) {
          d3.event.stopPropagation();
          this.parentNode.stationLabel = void 0;
          return d3.select(this).remove();
        };
        showStationLabel = function(d) {
          var rectLength, stationLabel;

          if (this.stationLabel) {
            return;
          }
          stationLabel = d3.select(this).append('g').classed("station-label", true).on('click.closeLabel', closeStationLabel);
          rectLength = d.data.meaning.length + 2;
          stationLabel.append('rect').attr({
            x: 20,
            y: -r - 3
          }).attr({
            width: 8 * rectLength,
            height: 2.5 * r
          });
          stationLabel.append('text').text(function(d) {
            return d.data.meaning || '?';
          }).attr({
            x: 23,
            y: -r / 2 + 4
          });
          return this.stationLabel = stationLabel;
        };
        delayDblClick = function(ms, func) {
          if (that.timer) {
            clearTimeout(that.timer);
            return that.timer = null;
          } else {
            return that.timer = setTimeout((function(d) {
              that.timer = null;
              return func(d);
            }), ms);
          }
        };
        edge.enter().append("path").classed("edge", true).attr({
          d: "M0,0"
        });
        node_g = node.enter().append('g').classed("node", true).on('click.showLabel', function(d) {
          that = this;
          return delayDblClick(550, function() {
            return showStationLabel.call(that, d);
          });
        }).on('dblclick.selectNode', function(d) {
          return nodeDoubleClick(d);
        });
        node_g.append('rect').attr({
          x: -r,
          y: -r,
          width: 2 * r,
          height: 2 * r
        });
        node_g.append('text');
        endnode_g = endnode.enter().append('g').classed("endnode", true).on('click.selectLine', function(d) {
          return endnodeSelectLine(d);
        });
        endnode_g.append("circle").attr({
          r: r
        });
        endnode_g.append("text").text(function(d) {
          return d.label;
        });
        edge.each(function(d) {
          return d3.select(this).classed("line_" + d.line.data.radical, true);
        }).transition().duration(config.transitionTime).attr({
          d: function(d) {
            return utils.svgline([d.source, d.target]);
          }
        });
        edge.each(function(d) {
          if (d.calc) {
            return d3.select(this).style("stroke", "magenta");
          }
        });
        edge.classed("filtered", function(d) {
          return d.style.filtered;
        });
        node.classed("filtered", function(d) {
          return d.style.filtered;
        });
        node.classed("searchresult", function(d) {
          return d.style.isSearchresult;
        });
        node_t = node.transition().duration(config.transitionTime);
        node_t.attr({
          transform: function(d) {
            return "translate(" + d.x + " " + d.y + ")";
          }
        });
        node_t.style({
          fill: function(d) {
            if (d.style.hi) {
              return "red";
            } else if (d.style.lo) {
              return "green";
            } else {
              return null;
            }
          }
        });
        node_t.select('text').text(function(d) {
          return d.label;
        });
        endnode.transition().duration(config.transitionTime).attr({
          transform: function(d) {
            return "translate(" + d.x + " " + d.y + ")";
          }
        });
        edge.exit().remove();
        node.exit().remove();
        endnode.exit().remove();
        if (config.forceGraph) {
          force = d3.layout.force().nodes(__slice.call(nodes).concat(__slice.call(endnodes))).edges(edges).edgeStrength(1).edgeDistance(8 * r).charge(-3000).gravity(0.001).start().on('tick', function() {
            return updatePositions();
          });
          return node.call(force.drag);
        }
      };

      return View;

    })();
    endnodeSelectLine = function(d) {
      var selector;

      selector = ".line_" + d.data.radical;
      d3.selectAll(selector).classed('highlighted', function(d) {
        return d.highlighted = !d3.select(this).classed('highlighted');
      });
      return d3.selectAll(".edge").sort(function(a, b) {
        return compareNumber(a.highlighted || 0, b.highlighted || 0);
      });
    };
    table_data = [[], [], [], [], []];
    nodeDoubleClick = function(d) {
      var i, item, k, nothingtodo, r, radicals, table, table_td, table_tr, tablecontentcols, tablehead, tableheadcols, _i, _len, _ref;

      table = d3.select('table#details tbody');
      tablehead = d3.select('thead').selectAll('tr');
      i = 1;
      nothingtodo = false;
      _ref = table.selectAll('tr').selectAll('td');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        item = table.selectAll('tr').selectAll('td')[0][i];
        if (item === void 0) {
          break;
        }
        if (item.textContent === d.label) {
          nothingtodo = true;
          break;
        }
        i++;
      }
      radicals = [];
      radicals = (function() {
        var _j, _len1, _ref1, _results;

        _ref1 = d.data.radicals;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          r = _ref1[_j];
          _results.push(r.radical);
        }
        return _results;
      })();
      if (!nothingtodo) {
        table_data[0].push(d.label);
        table_data[1].push(d.data.meaning);
        table_data[2].push(radicals);
        table_data[3].push(d.data.onyomi);
        table_data[4].push(d.data.kunyomi);
      }
      table_tr = table.selectAll('tr').data(table_data);
      table_td = table_tr.selectAll('td.content').data(function(d) {
        return d;
      });
      if (!nothingtodo) {
        table_tr.enter().append('tr');
        table_td.enter().append('td').classed("content", true);
      }
      tablecontentcols = table.select('tr').selectAll('td')[0].length;
      tableheadcols = tablehead.selectAll('th')[0].length;
      if (tableheadcols < tablecontentcols) {
        tablehead.append('th');
      }
      return table_td.text(function(d) {
        return d;
      });
    };
    return {
      View: View
    };
  });

}).call(this);

/*
//@ sourceMappingURL=interactivity.map
*/
