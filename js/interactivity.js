// Generated by CoffeeScript 1.6.2
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  define(['utils'], function(_arg) {
    var P, View, compareNumber, endnodeSelectLine, nodeMouseMove, nodeMouseOut, nodeMouseOver, svgline, tooltip;

    P = _arg.P, compareNumber = _arg.compareNumber;
    View = (function() {
      function View(_arg1) {
        this.svg = _arg1.svg, this.graph = _arg1.graph, this.config = _arg1.config;
        this.r = 12;
        this.g_edges = this.svg.append('g');
        this.g_nodes = this.svg.append('g');
        this.g_endnodes = this.svg.append('g');
      }

      View.prototype.update = function() {
        var config, edge, edges, endnode, endnode_g, endnodes, force, g_edges, g_endnodes, g_nodes, lines, node, node_g, nodes, r, svg, _ref;

        svg = this.svg, r = this.r, config = this.config, g_edges = this.g_edges, g_nodes = this.g_nodes, g_endnodes = this.g_endnodes;
        _ref = this.graph, nodes = _ref.nodes, lines = _ref.lines, edges = _ref.edges, endnodes = _ref.endnodes;
        nodes = (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = nodes.length; _i < _len; _i++) {
            node = nodes[_i];
            if (__indexOf.call(endnodes, node) < 0) {
              _results.push(node);
            }
          }
          return _results;
        })();
        edge = g_edges.selectAll(".edge").data(edges);
        node = g_nodes.selectAll('.node').data(nodes);
        endnode = g_endnodes.selectAll('.endnode').data(endnodes);
        edge.enter().append("path").classed("edge", true).attr({
          d: function(d) {
            return svgline([
              {
                x: 0,
                y: 0
              }, {
                x: 0,
                y: 0
              }
            ]);
          }
        });
        node_g = node.enter().append('g').classed("node", true).on('mouseover', function(d) {
          return nodeMouseOver(d);
        }).on('mouseout', function(d) {
          return nodeMouseOut(d);
        }).on('mousemove', function(d) {
          return nodeMouseMove(d, node);
        });
        node_g.append('rect').attr({
          x: -r,
          y: -r,
          width: 2 * r,
          height: 2 * r
        });
        node_g.append('text').text(function(d) {
          return d.label;
        });
        endnode_g = endnode.enter().append('g').classed("endnode", true).on('click.selectLine', function(d) {
          return endnodeSelectLine(d);
        });
        endnode_g.append("circle").attr({
          r: r
        });
        endnode_g.append("text").text(function(d) {
          return d.label;
        });
        edge.each(function(d) {
          return d3.select(this).classed("line_" + d.line.data.radical, true);
        }).transition().duration(config.transitionTime).attr({
          d: function(d) {
            return svgline([d.source, d.target]);
          }
        });
        node.transition().duration(config.transitionTime).attr({
          transform: function(d) {
            return "translate(" + d.x + " " + d.y + ")";
          }
        });
        endnode.transition().duration(config.transitionTime).attr({
          transform: function(d) {
            return "translate(" + d.x + " " + d.y + ")";
          }
        });
        edge.exit().remove();
        node.exit().remove();
        endnode.exit().remove();
        if (config.forceGraph) {
          force = d3.layout.force().nodes(__slice.call(nodes).concat(__slice.call(endnodes))).edges(edges).edgeStrength(1).edgeDistance(8 * r).charge(-3000).gravity(0.001).start().on('tick', function() {
            return updatePositions();
          });
          return node.call(force.drag);
        }
      };

      return View;

    })();
    svgline = d3.svg.line().x(function(_arg1) {
      var x;

      x = _arg1.x;
      return x;
    }).y(function(_arg1) {
      var y;

      y = _arg1.y;
      return y;
    });
    endnodeSelectLine = function(d) {
      var selector;

      selector = ".line_" + d.data.radical;
      d3.selectAll(selector).classed('highlighted', function(d) {
        return d.highlighted = !d3.select(this).classed('highlighted');
      });
      return d3.selectAll(".edge").sort(function(a, b) {
        return compareNumber(a.highlighted || 0, b.highlighted || 0);
      });
    };
    tooltip = d3.select('body').append('div').attr('class', 'tooltip').style('opacity', 0);
    nodeMouseOver = function(d) {
      return tooltip.transition().duration(500).style('opacity', 1).style('left', d3.event.pageX + 'px').style('top', (d3.event.pageY - 28) + 'px');
    };
    nodeMouseOut = function(d) {
      return tooltip.transition().duration(500).style('opacity', 0).style('left', d3.event.pageX + 'px').style('top', (d3.event.pageY - 28) + 'px');
    };
    nodeMouseMove = function(d, node) {
      var _base, _base1, _base2, _ref, _ref1, _ref2;

      if ((_ref = (_base = d.data).onyomi) == null) {
        _base.onyomi = ' - ';
      }
      if ((_ref1 = (_base1 = d.data).kunyomi) == null) {
        _base1.kunyomi = ' - ';
      }
      if ((_ref2 = (_base2 = d.data).grade) == null) {
        _base2.grade = ' - ';
      }
      return tooltip.html(d.label + '<br/>' + d.data.meaning + '<br/>' + 'strokes: ' + d.data.stroke_n + '<br/>' + 'ON: ' + d.data.onyomi + '<br/>' + 'KUN: ' + d.data.kunyomi + '<br/>' + 'school year: ' + d.data.grade).style('opacity', 1).style("left", d3.event.pageX + "px").style("top", (d3.event.pageY - 28) + "px");
    };
    return {
      View: View
    };
  });

}).call(this);

/*
//@ sourceMappingURL=interactivity.map
*/
