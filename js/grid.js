// Generated by CoffeeScript 1.6.2
(function() {
  define([], function() {
    var Grid, GridCoordGenerator;

    Grid = (function() {
      function Grid() {
        this.map = d3.map();
      }

      Grid.prototype.get = function(coord) {
        return this.map.get((this.getCoord(coord)).coord);
      };

      Grid.prototype.has = function(coord) {
        return this.map.has((this.getCoord(coord)).coord);
      };

      Grid.prototype.remove = function(coord) {
        return this.map.remove((this.getCoord(coord)).coord);
      };

      Grid.prototype.coords = function() {
        return this.map.keys();
      };

      Grid.prototype.nodes = function() {
        return this.map.values();
      };

      Grid.prototype.entries = function() {
        return this.map.entries();
      };

      Grid.prototype.forEach = function(func) {
        return this.map.forEach(func);
      };

      Grid.prototype.set = function(coord, node) {
        var x, y, _ref;

        _ref = this.getCoord(coord), coord = _ref.coord, x = _ref.x, y = _ref.y;
        node.x = x;
        node.y = y;
        return this.map.set(coord, node);
      };

      Grid.prototype.getCoord = function(coord) {
        var d, x, y, _ref;

        if (typeof coord === 'string') {
          _ref = (function() {
            var _i, _len, _ref, _results;

            _ref = coord.split('x');
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              d = _ref[_i];
              _results.push(+d);
            }
            return _results;
          })(), x = _ref[0], y = _ref[1];
        } else if (Array.isArray(coord)) {
          x = coord[0], y = coord[1];
          coord = x + 'x' + y;
        } else if ('x' in coord && 'y' in coord) {
          x = coord.x, y = coord.y;
          coord = x + 'x' + y;
        }
        return {
          coord: coord,
          x: x,
          y: y
        };
      };

      return Grid;

    })();
    GridCoordGenerator = (function() {
      function GridCoordGenerator(_arg) {
        var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;

        _ref = _arg != null ? _arg : {}, this.g = _ref.spacing, this.filter = _ref.filter, this.r = _ref.r, this.x = _ref.x, this.y = _ref.y;
        if ((_ref1 = this.r) == null) {
          this.r = 1;
        }
        if ((_ref2 = this.x) == null) {
          this.x = 0;
        }
        if ((_ref3 = this.y) == null) {
          this.y = 0;
        }
        if ((_ref4 = this.g) == null) {
          this.g = 1;
        }
        if ((_ref5 = this.filter) == null) {
          this.filter = function() {
            return true;
          };
        }
      }

      GridCoordGenerator.prototype.next = function() {
        var c, coord, coords, filter, g, gx, gy, x, y;

        g = this.g, filter = this.filter, x = this.x, y = this.y;
        gx = g * Math.round(x / g);
        gy = g * Math.round(y / g);
        coords = [];
        while (coords.length === 0) {
          coords = this.coords(this.r++);
          coords = (function() {
            var _i, _len, _results;

            _results = [];
            for (_i = 0, _len = coords.length; _i < _len; _i++) {
              c = coords[_i];
              _results.push([gx + g * c[0], gy + g * c[1]]);
            }
            return _results;
          })();
          coords = (function() {
            var _i, _len, _results;

            _results = [];
            for (_i = 0, _len = coords.length; _i < _len; _i++) {
              coord = coords[_i];
              if (filter(coord)) {
                _results.push(coord);
              }
            }
            return _results;
          })();
        }
        return coords;
      };

      GridCoordGenerator.prototype.coords = function(r) {
        var coords, x, y, _i;

        coords = [];
        for (x = _i = 0; 0 <= r ? _i <= r : _i >= r; x = 0 <= r ? ++_i : --_i) {
          y = r - Math.abs(x);
          coords.push([+x, +y]);
          coords.push([-x, -y]);
          if (x !== 0 && y !== 0) {
            coords.push([-x, +y]);
          }
          if (x !== 0 && y !== 0) {
            coords.push([+x, -y]);
          }
        }
        return coords;
      };

      return GridCoordGenerator;

    })();
    return {
      Grid: Grid,
      GridCoordGenerator: GridCoordGenerator
    };
  });

}).call(this);

/*
//@ sourceMappingURL=grid.map
*/
