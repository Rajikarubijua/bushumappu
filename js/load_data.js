// Generated by CoffeeScript 1.8.0
(function() {
  define('load_data', ['utils'], function(_arg) {
    var P, async, load, parse, parseJouyou, parseKext, parseKrad, parseMaybeNumber, parseRadk;
    P = _arg.P, async = _arg.async, parseMaybeNumber = _arg.parseMaybeNumber;
    load = function(cb) {
      return async.map({
        krad: function(cb) {
          return d3.text("data/krad", cb);
        },
        radk: function(cb) {
          return d3.text("data/radk", cb);
        },
        jouyou: function(cb) {
          return d3.text("data/jouyou", cb);
        },
        kext: function(cb) {
          return d3.text("data/kext", cb);
        }
      }, cb);
    };
    parse = function(data) {
      parseKrad(data.krad[1]);
      parseRadk(data.radk[1]);
      parseJouyou(data.jouyou[1]);
      return parseKext(data.kext[1]);
    };
    parseKrad = function(content) {
      var i, kanji, line, lines, o, radical, radicals, _base, _i, _len, _results;
      lines = content.split('\n');
      _results = [];
      for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
        line = lines[i];
        if (line[0] === '#' || !line) {
          continue;
        }
        kanji = line[0];
        if (line.slice(1, 4) !== ' : ') {
          throw "expected \" : \" at line " + i + ", got \"" + line.slice(1, 4) + "\"";
        }
        radicals = line.slice(4).trim().split(' ');
        o = (_base = my.kanjis)[kanji] != null ? _base[kanji] : _base[kanji] = {
          kanji: kanji
        };
        o.radicals = radicals;
        _results.push((function() {
          var _base1, _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = radicals.length; _j < _len1; _j++) {
            radical = radicals[_j];
            o = (_base1 = my.radicals)[radical] != null ? _base1[radical] : _base1[radical] = {
              radical: radical
            };
            if (o.kanjis == null) {
              o.kanjis = "";
            }
            _results1.push(o.kanjis += kanji);
          }
          return _results1;
        })());
      }
      return _results;
    };
    parseRadk = function(lines) {
      var $line, i, kanjis, line, m, radical, strokes_n, _, _i, _len, _results;
      radical = null;
      strokes_n = null;
      kanjis = "";
      $line = /\$ (.) (\d+) ?.*/;
      _results = [];
      for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
        line = lines[i];
        if (line[0] === '#' || !line) {
          continue;
        }
        m = line.match($line);
        if (m === null) {
          _results.push(kanjis += line.trim());
        } else {
          if (radical) {
            radical.strokes_n = +strokes_n;
            radical.kanjis = strUnique(radical.kanjis, kanjis);
          }
          _ = m[0], radical = m[1], strokes_n = m[2];
          _results.push(radical = my.radicals[radical]);
        }
      }
      return _results;
    };
    parseJouyou = function(content) {
      var allkanji, char, grade, i, kanjis, line, lines, radical, _i, _j, _len, _len1, _results;
      lines = content.split('\n');
      allkanji = "";
      for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
        line = lines[i];
        if (line[0] === '#' || !line) {
          continue;
        }
        grade = +line.match(/^\d+/);
        kanjis = (line.match(/:(.*)$/))[1];
        my.jouyou_grade[grade] = kanjis;
        allkanji += kanjis;
      }
      _results = [];
      for (_j = 0, _len1 = allkanji.length; _j < _len1; _j++) {
        char = allkanji[_j];
        my.jouyou.push(char);
        _results.push((function() {
          var _base, _k, _len2, _ref, _results1;
          _ref = my.kanjis[char].radicals;
          _results1 = [];
          for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
            radical = _ref[_k];
            if ((_base = my.jouyou_radicals)[radical] == null) {
              _base[radical] = "";
            }
            _results1.push(my.jouyou_radicals[radical] += char);
          }
          return _results1;
        })());
      }
      return _results;
    };
    parseKext = function(content) {
      var entries, entry, i, kanji, line, lines, map, name, obj, _i, _len, _results;
      lines = content.split('\n');
      _results = [];
      for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
        line = lines[i];
        if (line[0] === '#' || !line) {
          continue;
        }
        entries = line.split(";");
        _results.push((function() {
          var _j, _len1, _name, _ref, _results1;
          _results1 = [];
          for (_j = 0, _len1 = entries.length; _j < _len1; _j++) {
            entry = entries[_j];
            _ref = entry.split(":"), name = _ref[0], obj = _ref[1];
            name = name != null ? name.trim() : void 0;
            obj = obj != null ? obj.trim() : void 0;
            if (!obj) {
              continue;
            }
            if (name === "KANJI") {
              kanji = my.kanjis[obj];
              continue;
            }
            if (name === "MEAN") {
              if (obj[obj.length - 1] === ',') {
                obj = obj.slice(0, +(obj.length - 2) + 1 || 9e9);
              }
            }
            map = {
              STROKECOUNT: 'stroke_n',
              FREQ: 'freq',
              ON: 'onyomi',
              KUN: 'kunyomi',
              MEAN: 'meaning'
            };
            _results1.push(kanji != null ? kanji[_name = map[name]] != null ? kanji[_name] : kanji[_name] = parseMaybeNumber(obj) : void 0);
          }
          return _results1;
        })());
      }
      return _results;
    };
    return function(cb) {
      return load(function(data) {
        parse(data);
        return cb();
      });
    };
  });

}).call(this);

//# sourceMappingURL=load_data.js.map
