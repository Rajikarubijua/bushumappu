// Generated by CoffeeScript 1.6.2
(function() {
  var config;

  config = {
    showLines: false,
    fixedEndstation: false,
    fixedStation: false,
    filterRadicals: function(radicals) {
      return radicals.slice(0, 14);
    },
    filterLinkedRadicals: function(radicals) {
      return radicals;
    },
    sunflowerKanjis: true,
    kmeansInitialVectorsRandom: false,
    kmeansClustersN: -1,
    forceGraph: false,
    circularLines: false,
    gridSpacing: 12,
    debugOverlay: false,
    transitionTime: 2000,
    initialScale: 1,
    edgesBeforeSnap: false,
    timeToOptimize: 3000,
    optimizeMaxLoops: 0,
    optimizeMaxSteps: 0,
    slideshowSteps: 1,
    nodeSize: 12
  };

  figue.KMEANS_MAX_ITERATIONS = 1;

  window.my = {
    kanjis: {},
    radicals: {},
    jouyou_radicals: {},
    jouyou: [],
    jouyou_grade: {},
    config: config
  };

  define(['utils', 'load_data', 'central_station', 'interactivity', 'routing', 'prepare_data', 'test_routing', 'test_bench', 'tests', 'filtersearch'], function(_arg, loadData, _arg1, _arg2, _arg3, prepare, testRouting, testBench, tests, _arg4) {
    var CentralStationEmbedder, FilterSearch, MetroMapLayout, P, View, all_tests, async, copyAttrs, main, prettyDebug, setupFilterSearchEvents, showDebugOverlay, somePrettyPrint, styleZoom;

    P = _arg.P, somePrettyPrint = _arg.somePrettyPrint, styleZoom = _arg.styleZoom, async = _arg.async, prettyDebug = _arg.prettyDebug, copyAttrs = _arg.copyAttrs;
    CentralStationEmbedder = _arg1.CentralStationEmbedder;
    View = _arg2.View;
    MetroMapLayout = _arg3.MetroMapLayout;
    FilterSearch = _arg4.FilterSearch;
    main = function() {
      var body, embedder, h, kanji_i, kanjis, radicals, slideshow, svg, view, w, zoom;

      body = my.body = d3.select('body');
      if (config.debugOverlay) {
        showDebugOverlay(body);
      }
      svg = my.svg = body.select('svg#graph');
      svg.g = svg.append('g');
      w = new Signal;
      h = new Signal;
      window.onresize = function() {
        w(window.innerWidth);
        return h(window.innerHeight);
      };
      window.onresize();
      new Observer(function() {
        var attrs;

        attrs = {
          width: 0.95 * w(),
          height: 0.66 * h()
        };
        svg.attr(attrs);
        return svg.style(attrs);
      });
      svg.call((zoom = d3.behavior.zoom()).translate([w() / 2, h() / 2]).scale(config.initialScale).on('zoom', styleZoom(svg.g, zoom)));
      svg.on('dblclick.zoom', null);
      prepare.setupRadicalJouyous();
      prepare.setupKanjiGrades();
      prepare.setupKanjiRadicals(d3.values(my.kanjis), my.radicals);
      radicals = prepare.getRadicals();
      kanjis = prepare.getKanjis(radicals);
      kanji_i = 0;
      embedder = new CentralStationEmbedder({
        config: config
      });
      view = new View({
        svg: svg.g,
        config: config
      });
      return (slideshow = function() {
        var graph, kanji, seaFill, _ref;

        if ((_ref = slideshow.steps) == null) {
          slideshow.steps = 0;
        }
        if (slideshow.steps++ >= config.slideshowSteps) {
          return;
        }
        kanji_i = Math.floor(Math.random() * kanjis.length);
        kanji = kanjis[kanji_i];
        console.info("central station " + kanji.kanji + " with " + kanji.radicals.length + " radicals");
        graph = embedder.graph(kanji, radicals, kanjis);
        seaFill = new FilterSearch({
          graph: graph,
          view: view
        });
        setupFilterSearchEvents(seaFill);
        seaFill.setup();
        view.update(graph);
        return setTimeout(slideshow, config.transitionTime + 2000);
      })();
    };
    showDebugOverlay = function(el) {
      return el.append('pre').attr({
        id: 'my'
      }).text(somePrettyPrint(my));
    };
    setupFilterSearchEvents = function(target) {
      var filter, resetAll, resetFilter, search;

      filter = function() {
        return target.filter();
      };
      search = function() {
        var result;

        result = target.search();
        return target.inHandler.displayResult(result);
      };
      resetFilter = function() {
        return target.resetFilter(d3.event.srcElement.id);
      };
      resetAll = function() {
        return target.resetAll();
      };
      d3.select('#btn_filter').on('click', filter);
      d3.select('#btn_search').on('click', search);
      d3.select('#btn_reset').on('click', resetAll);
      d3.selectAll('#btn_clear1').on('click', resetFilter);
      d3.selectAll('#btn_clear2').on('click', resetFilter);
      return d3.selectAll('#btn_clear3').on('click', resetFilter);
    };
    all_tests = copyAttrs({}, testRouting.tests, testBench.tests);
    console.info('end of tests');
    return loadData(main);
  });

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
