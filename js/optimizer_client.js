// Generated by CoffeeScript 1.8.0
(function() {
  define('optimizer_client', [], function() {
    var Optimizer;
    Optimizer = (function() {
      function Optimizer(cb) {
        this.worker = new Worker("js/optimize.js?" + Date.now());
        this.worker.onmessage = (function(_this) {
          return function(ev) {
            if (ev.data === 'ready') {
              return typeof cb === "function" ? cb() : void 0;
            }
            return _this[ev.data.type](ev.data);
          };
        })(this);
        this.onNodes = null;
      }

      Optimizer.prototype.postMessage = function(msg) {
        console.log('postMessage', msg.type);
        return this.worker.postMessage(msg);
      };

      Optimizer.prototype.graph = function(graph) {
        this._graph = graph;
        return this.postMessage({
          type: 'graph',
          graph: this._graph.toPlainLines()
        });
      };

      Optimizer.prototype.optimize = function() {
        return this.postMessage({
          type: 'optimize'
        });
      };

      Optimizer.prototype.snapNodes = function() {
        return this.postMessage({
          type: 'snapNodes'
        });
      };

      Optimizer.prototype.applyRules = function() {
        return this.postMessage({
          type: 'applyRules'
        });
      };

      Optimizer.prototype.log = function(_arg) {
        var log;
        log = _arg.log;
        return console.log(log);
      };

      Optimizer.prototype.node = function(_arg) {
        var node, other;
        node = _arg.node;
        other = this._graph.nodesById[node.id];
        other.move(node.x, node.y);
        other.style.debug_fill = node.debug_fill;
        if (!this.raf) {
          this.raf = true;
          return requestAnimationFrame((function(_this) {
            return function() {
              return _this.raf = false;
            };
          })(this));
        }
      };

      Optimizer.prototype.nodes = function(_arg) {
        var node, nodes, _i, _len;
        nodes = _arg.nodes;
        for (_i = 0, _len = nodes.length; _i < _len; _i++) {
          node = nodes[_i];
          this.node({
            node: node
          });
        }
        return typeof this.onNodes === "function" ? this.onNodes() : void 0;
      };

      return Optimizer;

    })();
    return {
      Optimizer: Optimizer
    };
  });

}).call(this);

//# sourceMappingURL=optimizer_client.js.map
