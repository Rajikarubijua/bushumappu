// Generated by CoffeeScript 1.6.2
(function() {
  define([], function() {
    var Edge, Line, Node;

    Node = (function() {
      var next_id;

      next_id = 0;

      function Node(_arg) {
        var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;

        _ref = _arg != null ? _arg : {}, this.x = _ref.x, this.y = _ref.y, this.lines = _ref.lines, this.edges = _ref.edges, this.data = _ref.data, this.style = _ref.style, this.id = _ref.id;
        if ((_ref1 = this.x) == null) {
          this.x = 0;
        }
        if ((_ref2 = this.y) == null) {
          this.y = 0;
        }
        if ((_ref3 = this.lines) == null) {
          this.lines = [];
        }
        if ((_ref4 = this.edges) == null) {
          this.edges = [];
        }
        if ((_ref5 = this.data) == null) {
          this.data = {};
        }
        if ((_ref6 = this.style) == null) {
          this.style = {};
        }
        if ((_ref7 = this.id) == null) {
          this.id = next_id++;
        }
      }

      Node.prototype.coord = function() {
        return this.x + "x" + this.y;
      };

      return Node;

    })();
    Edge = (function() {
      function Edge(_arg) {
        var _ref, _ref1, _ref2, _ref3;

        _ref = _arg != null ? _arg : {}, this.source = _ref.source, this.target = _ref.target, this.line = _ref.line, this.radical = _ref.radical;
        if (this.radical) {
          throw this.radical;
        }
        if ((_ref1 = this.source) == null) {
          this.source = null;
        }
        if ((_ref2 = this.target) == null) {
          this.target = null;
        }
        if ((_ref3 = this.line) == null) {
          this.line = null;
        }
      }

      Edge.prototype.getVector = function() {
        return [this.target.x - this.source.x, this.target.y - this.source.y];
      };

      Edge.prototype.getAngle = function(edge) {
        var angle, l1, l2, scalar, x1, x2, y1, y2, _ref, _ref1;

        _ref = this.getVector(), x1 = _ref[0], y1 = _ref[1];
        _ref1 = edge.getVector(), x2 = _ref1[0], y2 = _ref1[1];
        scalar = x1 * x2 + y1 * y2;
        l1 = Math.sqrt(Math.pow(x1, 2) + Math.pow(y1, 2));
        l2 = Math.sqrt(Math.pow(x2, 2) + Math.pow(y2, 2));
        return angle = Math.acos(scalar / (l1 * l2));
      };

      Edge.prototype.lengthSqr = function() {
        var x, y, _ref;

        _ref = this.getVector(), x = _ref[0], y = _ref[1];
        return (Math.pow(x, 2)) + (Math.pow(y, 2));
      };

      return Edge;

    })();
    Line = (function() {
      var next_id;

      next_id = 0;

      function Line(_arg) {
        var _ref, _ref1, _ref2, _ref3, _ref4;

        _ref = _arg != null ? _arg : {}, this.nodes = _ref.nodes, this.edges = _ref.edges, this.data = _ref.data, this.id = _ref.id;
        if ((_ref1 = this.nodes) == null) {
          this.nodes = [];
        }
        if ((_ref2 = this.edges) == null) {
          this.edges = [];
        }
        if ((_ref3 = this.data) == null) {
          this.data = {};
        }
        if ((_ref4 = this.id) == null) {
          this.id = next_id++;
        }
      }

      return Line;

    })();
    return my.graph = {
      Node: Node,
      Edge: Edge,
      Line: Line
    };
  });

}).call(this);

/*
//@ sourceMappingURL=graph.map
*/
