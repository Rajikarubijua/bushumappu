// Generated by CoffeeScript 1.8.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define('station_label', ['utils'], function(_arg) {
    var P, StationLabel, cssTranslateXY;
    P = _arg.P, cssTranslateXY = _arg.cssTranslateXY;
    StationLabel = (function() {
      function StationLabel(_arg1) {
        this.node = _arg1.node, this.g_stationLabels = _arg1.g_stationLabels, this.style = _arg1.style;
        this.node;
        this.g_stationLabels;
        if (this.style == null) {
          this.style = {};
        }
      }

      StationLabel.prototype.closeStationLabel = function() {
        var me;
        me = this;
        if (!me.node.style.stationLabel) {
          return;
        }
        me.node.style.stationLabel.remove();
        return me.node.style.stationLabel = void 0;
      };

      StationLabel.prototype.showStationLabel = function(node) {
        var me, stationLabel;
        me = this;
        if (node.style.stationLabel) {
          return;
        }
        stationLabel = this.g_stationLabels.append('g').classed("station-label", true).attr({
          transform: cssTranslateXY(node)
        }).on('click.closeLabel', function() {
          return me.closeStationLabel();
        });
        return this.updateListener(stationLabel, this.node);
      };

      StationLabel.prototype.updateListener = function(stationLabel) {
        var label_rect, label_text, me, rectLength, stationLabelAngle;
        me = this;
        stationLabelAngle = this.calculateLabelAngle(this.node);
        label_rect = stationLabel.append('rect').attr({
          x: 24,
          y: -config.nodeSize - 3
        }).attr({
          transform: "rotate(" + stationLabelAngle + ")"
        });
        label_text = stationLabel.append('text').text(function(d) {
          return me.node.data.meaning || '?';
        }).attr({
          x: 28,
          y: -config.nodeSize / 2 + 4
        }).attr({
          transform: "rotate(" + stationLabelAngle + ")"
        });
        rectLength = label_text.node().getBBox().width + 8;
        label_rect.attr({
          width: rectLength,
          height: 2.5 * config.nodeSize
        });
        return me.node.style.stationLabel = stationLabel;
      };

      StationLabel.prototype.calculateLabelAngle = function(node) {
        var a, edge, edgeAngles, r_a, stationLabelAngle, _i, _len, _ref;
        edgeAngles = [];
        _ref = node.edges;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          edge = _ref[_i];
          a = edge.firstAngleFromNode(node);
          r_a = Math.round(a / (0.25 * Math.PI));
          edgeAngles.push(r_a);
        }
        stationLabelAngle = 0;
        if (__indexOf.call(edgeAngles, 0) >= 0) {
          stationLabelAngle = -45;
        }
        return stationLabelAngle;
      };

      return StationLabel;

    })();
    return {
      StationLabel: StationLabel
    };
  });

}).call(this);

//# sourceMappingURL=station_label.js.map
