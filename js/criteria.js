// Generated by CoffeeScript 1.6.2
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['utils'], function(utils) {
    var LineStraightness, lineStraightness, otherEdge, otherNode;

    lineStraightness = function(node) {
      return new LineStraightness(node);
    };
    LineStraightness = (function() {
      function LineStraightness(node) {
        var segments;

        segments = this.createSegments(node);
        this.deps = this.createDeps(node, segments);
        this.value = this.createValue(segments);
      }

      LineStraightness.prototype.createSegments = function(node) {
        var edge, line, other, other_node, segment, segments, _i, _j, _len, _len1, _ref, _ref1;

        segments = {};
        _ref = node.lines;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          line = _ref[_i];
          segments[line.id] = [];
        }
        _ref1 = node.edges;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          edge = _ref1[_j];
          other_node = otherNode(node, edge);
          other = otherEdge(other_node, edge);
          segment = segments[edge.line.id];
          segment.push(edge);
          if (other) {
            segment.push(other);
          }
        }
        return d3.values(segments);
      };

      LineStraightness.prototype.createDeps = function(node, segments) {
        var deps, edge, edges, n, _i, _j, _k, _len, _len1, _len2, _ref;

        deps = [];
        for (_i = 0, _len = segments.length; _i < _len; _i++) {
          edges = segments[_i];
          for (_j = 0, _len1 = edges.length; _j < _len1; _j++) {
            edge = edges[_j];
            _ref = [edge.source, edge.target];
            for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
              n = _ref[_k];
              if (n !== node && __indexOf.call(deps, n) < 0) {
                deps.push(n);
              }
            }
          }
        }
        return deps;
      };

      LineStraightness.prototype.createValue = function(segments) {
        var a, angle, angles, b, edges, value;

        angles = (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = segments.length; _i < _len; _i++) {
            edges = segments[_i];
            edges = utils.sortSomewhat(edges, function(a, b) {
              if (a.target === b.source) {
                return -1;
              }
              if (a.source === b.target) {
                return 1;
              }
            });
            a = edges[0];
            _results.push((function() {
              var _j, _len1, _ref, _results1;

              _ref = edges.slice(1);
              _results1 = [];
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                b = _ref[_j];
                angle = a.getAngle(b);
                angle = Math.pow(angle, 2);
                if (angle < 0.00001) {
                  _results1.push(0);
                } else {
                  _results1.push(angle);
                }
              }
              return _results1;
            })());
          }
          return _results;
        })();
        return value = d3.sum(d3.merge(angles));
      };

      return LineStraightness;

    })();
    otherNode = function(node, edge) {
      if (edge.source === node) {
        return edge.target;
      } else {
        return edge.source;
      }
    };
    otherEdge = function(node, edge) {
      var other, _i, _len, _ref;

      _ref = node.edges;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        other = _ref[_i];
        if (other === edge) {
          continue;
        }
        if (other.line.id === edge.line.id) {
          return other;
        }
      }
      return null;
    };
    return {
      lineStraightness: lineStraightness
    };
  });

}).call(this);

/*
//@ sourceMappingURL=criteria.map
*/
