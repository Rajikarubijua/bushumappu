// Generated by CoffeeScript 1.6.2
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['utils'], function(utils) {
    var P, Tube, cptplaceholder, createTubes, getStrokeWidth;

    P = utils.P;
    cptplaceholder = 0;
    Tube = (function() {
      var tube_id;

      tube_id = 0;

      function Tube(_arg) {
        var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;

        _ref = _arg != null ? _arg : {}, this.radicals = _ref.radicals, this.width = _ref.width, this.angle = _ref.angle, this.x = _ref.x, this.y = _ref.y, this.edges = _ref.edges;
        if ((_ref1 = this.radicals) == null) {
          this.radicals = [];
        }
        if ((_ref2 = this.width) == null) {
          this.width = 0;
        }
        if ((_ref3 = this.angle) == null) {
          this.angle = 0;
        }
        if ((_ref4 = this.x) == null) {
          this.x = 0;
        }
        if ((_ref5 = this.y) == null) {
          this.y = 0;
        }
        if ((_ref6 = this.edges) == null) {
          this.edges = [];
        }
        if ((_ref7 = this.minilabel) == null) {
          this.minilabel = false;
        }
        this.id = tube_id++;
      }

      return Tube;

    })();
    createTubes = function(my_edge) {
      var coords, cos_angle, dx, dy, edge, edge_i, edges_n, line, normal, r, radical, sin_angle, source, target, tube, width, x05, x1, x2, y05, y1, y2, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;

      source = my_edge.source, target = my_edge.target;
      tube = new Tube;
      tube.x = source.x;
      tube.y = source.y;
      tube.angle = my_edge.getEdgeAngle();
      _ref = source.edges;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        edge = _ref[_i];
        if (!(((_ref1 = edge.source) === source || _ref1 === target) && ((_ref2 = edge.target) === source || _ref2 === target))) {
          continue;
        }
        tube.edges.push(edge);
        tube.width += getStrokeWidth(edge);
        radical = edge.line.data.radical;
        if (__indexOf.call(tube.radicals, radical) < 0) {
          tube.radicals.push(radical);
        }
      }
      normal = tube.angle + 0.5 * Math.PI;
      cos_angle = Math.cos(normal);
      sin_angle = Math.sin(normal);
      edges_n = tube.edges.length;
      _ref3 = tube.edges;
      for (edge_i = _j = 0, _len1 = _ref3.length; _j < _len1; edge_i = ++_j) {
        edge = _ref3[edge_i];
        source = edge.source, target = edge.target, line = edge.line;
        width = cptplaceholder + getStrokeWidth(edge);
        r = (edge_i - edges_n / 2 + 0.5) * width;
        x1 = source.x + r * cos_angle;
        y1 = source.y + r * sin_angle;
        x2 = target.x + r * cos_angle;
        y2 = target.y + r * sin_angle;
        coords = [[x1, y1], [x2, y2]];
        if (utils.distance01.apply(utils, coords) >= config.overlengthEdge) {
          dx = Math.abs(x2 - x1);
          dy = Math.abs(y2 - y1);
          if (dx >= dy) {
            x05 = x2;
            y05 = y1;
          } else {
            x05 = x1;
            y05 = y2;
          }
          coords = [[x1, y1], [x05, y05], [x2, y2]];
        }
        edge.setCoords(coords);
        edge.tube = tube;
      }
      return void 0;
    };
    getStrokeWidth = function(edge) {
      var stroke_width;

      return stroke_width = 5;
    };
    return {
      Tube: Tube,
      createTubes: createTubes
    };
  });

}).call(this);

/*
//@ sourceMappingURL=tubeEdges.map
*/
